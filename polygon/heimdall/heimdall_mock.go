// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/polygon/heimdall (interfaces: Heimdall)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./heimdall_mock.go -package=heimdall . Heimdall
//

// Package heimdall is a generated GoMock package.
package heimdall

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHeimdall is a mock of Heimdall interface.
type MockHeimdall struct {
	ctrl     *gomock.Controller
	recorder *MockHeimdallMockRecorder
	isgomock struct{}
}

// MockHeimdallMockRecorder is the mock recorder for MockHeimdall.
type MockHeimdallMockRecorder struct {
	mock *MockHeimdall
}

// NewMockHeimdall creates a new mock instance.
func NewMockHeimdall(ctrl *gomock.Controller) *MockHeimdall {
	mock := &MockHeimdall{ctrl: ctrl}
	mock.recorder = &MockHeimdallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeimdall) EXPECT() *MockHeimdallMockRecorder {
	return m.recorder
}

// FetchCheckpoints mocks base method.
func (m *MockHeimdall) FetchCheckpoints(ctx context.Context, store CheckpointStore, start, end CheckpointId) ([]*Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpoints", ctx, store, start, end)
	ret0, _ := ret[0].([]*Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpoints indicates an expected call of FetchCheckpoints.
func (mr *MockHeimdallMockRecorder) FetchCheckpoints(ctx, store, start, end any) *MockHeimdallFetchCheckpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpoints", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpoints), ctx, store, start, end)
	return &MockHeimdallFetchCheckpointsCall{Call: call}
}

// MockHeimdallFetchCheckpointsCall wrap *gomock.Call
type MockHeimdallFetchCheckpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchCheckpointsCall) Return(arg0 []*Checkpoint, arg1 error) *MockHeimdallFetchCheckpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchCheckpointsCall) Do(f func(context.Context, CheckpointStore, CheckpointId, CheckpointId) ([]*Checkpoint, error)) *MockHeimdallFetchCheckpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchCheckpointsCall) DoAndReturn(f func(context.Context, CheckpointStore, CheckpointId, CheckpointId) ([]*Checkpoint, error)) *MockHeimdallFetchCheckpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchCheckpointsFromBlock mocks base method.
func (m *MockHeimdall) FetchCheckpointsFromBlock(ctx context.Context, store CheckpointStore, startBlock uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCheckpointsFromBlock", ctx, store, startBlock)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCheckpointsFromBlock indicates an expected call of FetchCheckpointsFromBlock.
func (mr *MockHeimdallMockRecorder) FetchCheckpointsFromBlock(ctx, store, startBlock any) *MockHeimdallFetchCheckpointsFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCheckpointsFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchCheckpointsFromBlock), ctx, store, startBlock)
	return &MockHeimdallFetchCheckpointsFromBlockCall{Call: call}
}

// MockHeimdallFetchCheckpointsFromBlockCall wrap *gomock.Call
type MockHeimdallFetchCheckpointsFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchCheckpointsFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchCheckpointsFromBlockCall) Do(f func(context.Context, CheckpointStore, uint64) (Waypoints, error)) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchCheckpointsFromBlockCall) DoAndReturn(f func(context.Context, CheckpointStore, uint64) (Waypoints, error)) *MockHeimdallFetchCheckpointsFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchLatestSpan mocks base method.
func (m *MockHeimdall) FetchLatestSpan(ctx context.Context, store SpanStore) (*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestSpan", ctx, store)
	ret0, _ := ret[0].(*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestSpan indicates an expected call of FetchLatestSpan.
func (mr *MockHeimdallMockRecorder) FetchLatestSpan(ctx, store any) *MockHeimdallFetchLatestSpanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestSpan", reflect.TypeOf((*MockHeimdall)(nil).FetchLatestSpan), ctx, store)
	return &MockHeimdallFetchLatestSpanCall{Call: call}
}

// MockHeimdallFetchLatestSpanCall wrap *gomock.Call
type MockHeimdallFetchLatestSpanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchLatestSpanCall) Return(arg0 *Span, arg1 error) *MockHeimdallFetchLatestSpanCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchLatestSpanCall) Do(f func(context.Context, SpanStore) (*Span, error)) *MockHeimdallFetchLatestSpanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchLatestSpanCall) DoAndReturn(f func(context.Context, SpanStore) (*Span, error)) *MockHeimdallFetchLatestSpanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestones mocks base method.
func (m *MockHeimdall) FetchMilestones(ctx context.Context, store MilestoneStore, start, end MilestoneId) ([]*Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestones", ctx, store, start, end)
	ret0, _ := ret[0].([]*Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestones indicates an expected call of FetchMilestones.
func (mr *MockHeimdallMockRecorder) FetchMilestones(ctx, store, start, end any) *MockHeimdallFetchMilestonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestones", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestones), ctx, store, start, end)
	return &MockHeimdallFetchMilestonesCall{Call: call}
}

// MockHeimdallFetchMilestonesCall wrap *gomock.Call
type MockHeimdallFetchMilestonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchMilestonesCall) Return(arg0 []*Milestone, arg1 error) *MockHeimdallFetchMilestonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchMilestonesCall) Do(f func(context.Context, MilestoneStore, MilestoneId, MilestoneId) ([]*Milestone, error)) *MockHeimdallFetchMilestonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchMilestonesCall) DoAndReturn(f func(context.Context, MilestoneStore, MilestoneId, MilestoneId) ([]*Milestone, error)) *MockHeimdallFetchMilestonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchMilestonesFromBlock mocks base method.
func (m *MockHeimdall) FetchMilestonesFromBlock(ctx context.Context, store MilestoneStore, startBlock uint64) (Waypoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMilestonesFromBlock", ctx, store, startBlock)
	ret0, _ := ret[0].(Waypoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMilestonesFromBlock indicates an expected call of FetchMilestonesFromBlock.
func (mr *MockHeimdallMockRecorder) FetchMilestonesFromBlock(ctx, store, startBlock any) *MockHeimdallFetchMilestonesFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMilestonesFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchMilestonesFromBlock), ctx, store, startBlock)
	return &MockHeimdallFetchMilestonesFromBlockCall{Call: call}
}

// MockHeimdallFetchMilestonesFromBlockCall wrap *gomock.Call
type MockHeimdallFetchMilestonesFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchMilestonesFromBlockCall) Return(arg0 Waypoints, arg1 error) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchMilestonesFromBlockCall) Do(f func(context.Context, MilestoneStore, uint64) (Waypoints, error)) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchMilestonesFromBlockCall) DoAndReturn(f func(context.Context, MilestoneStore, uint64) (Waypoints, error)) *MockHeimdallFetchMilestonesFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchSpans mocks base method.
func (m *MockHeimdall) FetchSpans(ctx context.Context, store SpanStore, start, end SpanId) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpans", ctx, store, start, end)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpans indicates an expected call of FetchSpans.
func (mr *MockHeimdallMockRecorder) FetchSpans(ctx, store, start, end any) *MockHeimdallFetchSpansCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpans", reflect.TypeOf((*MockHeimdall)(nil).FetchSpans), ctx, store, start, end)
	return &MockHeimdallFetchSpansCall{Call: call}
}

// MockHeimdallFetchSpansCall wrap *gomock.Call
type MockHeimdallFetchSpansCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchSpansCall) Return(arg0 []*Span, arg1 error) *MockHeimdallFetchSpansCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchSpansCall) Do(f func(context.Context, SpanStore, SpanId, SpanId) ([]*Span, error)) *MockHeimdallFetchSpansCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchSpansCall) DoAndReturn(f func(context.Context, SpanStore, SpanId, SpanId) ([]*Span, error)) *MockHeimdallFetchSpansCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FetchSpansFromBlock mocks base method.
func (m *MockHeimdall) FetchSpansFromBlock(ctx context.Context, store SpanStore, startBlock uint64) ([]*Span, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSpansFromBlock", ctx, store, startBlock)
	ret0, _ := ret[0].([]*Span)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSpansFromBlock indicates an expected call of FetchSpansFromBlock.
func (mr *MockHeimdallMockRecorder) FetchSpansFromBlock(ctx, store, startBlock any) *MockHeimdallFetchSpansFromBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSpansFromBlock", reflect.TypeOf((*MockHeimdall)(nil).FetchSpansFromBlock), ctx, store, startBlock)
	return &MockHeimdallFetchSpansFromBlockCall{Call: call}
}

// MockHeimdallFetchSpansFromBlockCall wrap *gomock.Call
type MockHeimdallFetchSpansFromBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallFetchSpansFromBlockCall) Return(arg0 []*Span, arg1 error) *MockHeimdallFetchSpansFromBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallFetchSpansFromBlockCall) Do(f func(context.Context, SpanStore, uint64) ([]*Span, error)) *MockHeimdallFetchSpansFromBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallFetchSpansFromBlockCall) DoAndReturn(f func(context.Context, SpanStore, uint64) ([]*Span, error)) *MockHeimdallFetchSpansFromBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastCheckpointId mocks base method.
func (m *MockHeimdall) LastCheckpointId(ctx context.Context, store CheckpointStore) (CheckpointId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCheckpointId", ctx, store)
	ret0, _ := ret[0].(CheckpointId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastCheckpointId indicates an expected call of LastCheckpointId.
func (mr *MockHeimdallMockRecorder) LastCheckpointId(ctx, store any) *MockHeimdallLastCheckpointIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCheckpointId", reflect.TypeOf((*MockHeimdall)(nil).LastCheckpointId), ctx, store)
	return &MockHeimdallLastCheckpointIdCall{Call: call}
}

// MockHeimdallLastCheckpointIdCall wrap *gomock.Call
type MockHeimdallLastCheckpointIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallLastCheckpointIdCall) Return(arg0 CheckpointId, arg1 bool, arg2 error) *MockHeimdallLastCheckpointIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallLastCheckpointIdCall) Do(f func(context.Context, CheckpointStore) (CheckpointId, bool, error)) *MockHeimdallLastCheckpointIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallLastCheckpointIdCall) DoAndReturn(f func(context.Context, CheckpointStore) (CheckpointId, bool, error)) *MockHeimdallLastCheckpointIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastMilestoneId mocks base method.
func (m *MockHeimdall) LastMilestoneId(ctx context.Context, store MilestoneStore) (MilestoneId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastMilestoneId", ctx, store)
	ret0, _ := ret[0].(MilestoneId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastMilestoneId indicates an expected call of LastMilestoneId.
func (mr *MockHeimdallMockRecorder) LastMilestoneId(ctx, store any) *MockHeimdallLastMilestoneIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastMilestoneId", reflect.TypeOf((*MockHeimdall)(nil).LastMilestoneId), ctx, store)
	return &MockHeimdallLastMilestoneIdCall{Call: call}
}

// MockHeimdallLastMilestoneIdCall wrap *gomock.Call
type MockHeimdallLastMilestoneIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallLastMilestoneIdCall) Return(arg0 MilestoneId, arg1 bool, arg2 error) *MockHeimdallLastMilestoneIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallLastMilestoneIdCall) Do(f func(context.Context, MilestoneStore) (MilestoneId, bool, error)) *MockHeimdallLastMilestoneIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallLastMilestoneIdCall) DoAndReturn(f func(context.Context, MilestoneStore) (MilestoneId, bool, error)) *MockHeimdallLastMilestoneIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastSpanId mocks base method.
func (m *MockHeimdall) LastSpanId(ctx context.Context, store SpanStore) (SpanId, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSpanId", ctx, store)
	ret0, _ := ret[0].(SpanId)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LastSpanId indicates an expected call of LastSpanId.
func (mr *MockHeimdallMockRecorder) LastSpanId(ctx, store any) *MockHeimdallLastSpanIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSpanId", reflect.TypeOf((*MockHeimdall)(nil).LastSpanId), ctx, store)
	return &MockHeimdallLastSpanIdCall{Call: call}
}

// MockHeimdallLastSpanIdCall wrap *gomock.Call
type MockHeimdallLastSpanIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallLastSpanIdCall) Return(arg0 SpanId, arg1 bool, arg2 error) *MockHeimdallLastSpanIdCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallLastSpanIdCall) Do(f func(context.Context, SpanStore) (SpanId, bool, error)) *MockHeimdallLastSpanIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallLastSpanIdCall) DoAndReturn(f func(context.Context, SpanStore) (SpanId, bool, error)) *MockHeimdallLastSpanIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnCheckpointEvent mocks base method.
func (m *MockHeimdall) OnCheckpointEvent(ctx context.Context, store CheckpointStore, callback func(*Checkpoint)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCheckpointEvent", ctx, store, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCheckpointEvent indicates an expected call of OnCheckpointEvent.
func (mr *MockHeimdallMockRecorder) OnCheckpointEvent(ctx, store, callback any) *MockHeimdallOnCheckpointEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCheckpointEvent", reflect.TypeOf((*MockHeimdall)(nil).OnCheckpointEvent), ctx, store, callback)
	return &MockHeimdallOnCheckpointEventCall{Call: call}
}

// MockHeimdallOnCheckpointEventCall wrap *gomock.Call
type MockHeimdallOnCheckpointEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallOnCheckpointEventCall) Return(arg0 error) *MockHeimdallOnCheckpointEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallOnCheckpointEventCall) Do(f func(context.Context, CheckpointStore, func(*Checkpoint)) error) *MockHeimdallOnCheckpointEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallOnCheckpointEventCall) DoAndReturn(f func(context.Context, CheckpointStore, func(*Checkpoint)) error) *MockHeimdallOnCheckpointEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnMilestoneEvent mocks base method.
func (m *MockHeimdall) OnMilestoneEvent(ctx context.Context, store MilestoneStore, callback func(*Milestone)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnMilestoneEvent", ctx, store, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnMilestoneEvent indicates an expected call of OnMilestoneEvent.
func (mr *MockHeimdallMockRecorder) OnMilestoneEvent(ctx, store, callback any) *MockHeimdallOnMilestoneEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnMilestoneEvent", reflect.TypeOf((*MockHeimdall)(nil).OnMilestoneEvent), ctx, store, callback)
	return &MockHeimdallOnMilestoneEventCall{Call: call}
}

// MockHeimdallOnMilestoneEventCall wrap *gomock.Call
type MockHeimdallOnMilestoneEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallOnMilestoneEventCall) Return(arg0 error) *MockHeimdallOnMilestoneEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallOnMilestoneEventCall) Do(f func(context.Context, MilestoneStore, func(*Milestone)) error) *MockHeimdallOnMilestoneEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallOnMilestoneEventCall) DoAndReturn(f func(context.Context, MilestoneStore, func(*Milestone)) error) *MockHeimdallOnMilestoneEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnSpanEvent mocks base method.
func (m *MockHeimdall) OnSpanEvent(ctx context.Context, store SpanStore, callback func(*Span)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpanEvent", ctx, store, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpanEvent indicates an expected call of OnSpanEvent.
func (mr *MockHeimdallMockRecorder) OnSpanEvent(ctx, store, callback any) *MockHeimdallOnSpanEventCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpanEvent", reflect.TypeOf((*MockHeimdall)(nil).OnSpanEvent), ctx, store, callback)
	return &MockHeimdallOnSpanEventCall{Call: call}
}

// MockHeimdallOnSpanEventCall wrap *gomock.Call
type MockHeimdallOnSpanEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHeimdallOnSpanEventCall) Return(arg0 error) *MockHeimdallOnSpanEventCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHeimdallOnSpanEventCall) Do(f func(context.Context, SpanStore, func(*Span)) error) *MockHeimdallOnSpanEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHeimdallOnSpanEventCall) DoAndReturn(f func(context.Context, SpanStore, func(*Span)) error) *MockHeimdallOnSpanEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
